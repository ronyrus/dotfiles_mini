# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

export PATH=/usr/local/opt/make/libexec/gnubin:$HOME/Development/sources/fpga/fpga-toolchain/bin:/usr/local/bin:/usr/local/sbin:$HOME/Work/ios_team/bin:$HOME/Work/ios-tools/bin:$HOME/bin:$HOME/go/bin:$PATH
export TERM=xterm-256color
export EDITOR='gvim -f'
export DIFFPROG="gvim -df +0 -s `echo ~/.vim/diftop.vim`"
#export DIFFPROG='xxdiff'
export PYTHONPATH=${PYTHONPATH}:$HOME/Work/ios_team/:$HOME/Work/
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# BeagleBone-Black specific stuff
if [ -f /etc/dogtag ]; then
  export SLOTS=/sys/devices/platform/bone_capemgr/slots
  export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux


  function remove_slot {
      sudo sh -c "echo -$1 > $SLOTS"
  }

  alias pru0_off="sudo sh -c 'echo 4a334000.pru0 > /sys/bus/platform/drivers/pru-rproc/unbind'"
  alias pru1_off="sudo sh -c 'echo 4a338000.pru1 > /sys/bus/platform/drivers/pru-rproc/unbind'"
  alias pru0_on="sudo sh -c 'echo 4a334000.pru0 > /sys/bus/platform/drivers/pru-rproc/bind'"
  alias pru1_on="sudo sh -c 'echo 4a338000.pru1 > /sys/bus/platform/drivers/pru-rproc/bind'"
fi

# Override /etc/X11/app-defaults/XTerm* settings
case $(uname -s) in
  Darwin|FreeBSD) ;;
  NetBSD|OpenBSD) ;;
  Linux)
    if [ -f ~/.Xresources ] ; then
      xrdb -remove
      xrdb -merge ~/.Xresources
    fi
  ;;
esac

# normal username color is green
USERNAME_COLOR='00;32m'
AT_COLOR='01;33m'
HOST_COLOR='01;00m'
PWD_COLOR='01;34m'

# root username color is red
if [ ${UID} -eq 0 ]; then
	USERNAME_COLOR='01;31m'
fi

PS1='\n[\[\033[${USERNAME_COLOR}\]\u\[\033[00m\]\[\033[${AT_COLOR}\]@\[\033[00m\]\[\033[${HOST_COLOR}\]\h\[\033[00m\]][\[\033[${PWD_COLOR}\]\w\[\033[00m\]]\n>> ' 

case $(uname -s) in
  Darwin|FreeBSD)
    export CLICOLOR=1
    export LSCOLORS=exgxcxdxbxegedabagacad
  ;;
  NetBSD|OpenBSD) ;;
  Linux) ;;
esac

# if [ -f ~/.bashrc_typos_aliases_and_functions ]; then
#   source ~/.bashrc_typos_aliases_and_functions
# fi

# if [ -f ~/.bashrc_colors_and_ps1 ]; then
#   source ~/.bashrc_colors_and_ps1
# fi

# # Put secret configuration settings in ~/.secrets
# if [ -f ~/.secrets ]; then
#   source ~/.secrets
# fi

# bash_completion
case $(uname -s) in
  Darwin|FreeBSD)
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
      . $(brew --prefix)/etc/bash_completion
    fi
    ;;
  Linux)
    if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
            . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
            . /etc/bash_completion
        fi
    fi
    ;;
esac

#-------------------------------------------------------------------------------
# typo
#-------------------------------------------------------------------------------
alias dc="cd"
alias sl="ls"

alias ckae=cake
alias caek=cake

alias amke=make

#-------------------------------------------------------------------------------
# aliases
#-------------------------------------------------------------------------------
alias g='gvim'

# Set appropriate ls alias
case $(uname -s) in
  Darwin|FreeBSD)
    alias ls="ls -hFG"
  ;;
  Linux)
    alias ls="ls --color=always -hF"
  ;;
  NetBSD|OpenBSD)
    alias ls="ls -hF"
  ;;
esac

alias ll='ls -l'
alias la='ls -al'

alias q="cd .."
alias qq="cd ../.."
alias qqq="cd ../../.."

if [ -f ~/.bashrc.local ]; then
  source ~/.bashrc.local
fi

# Copy the PWD to the Clipboard
alias cpwd="pwd | tr -d '\n' | pbcopy && echo 'pwd copied to clipboard'"

alias ks='killall ssh'
alias psg='ps -eflw | grep'

alias gs='git status'
alias ga='git add'
alias gc='git checkout'
alias gci='git commit'
alias gdi='git diff'
alias gdt='git difftool'
alias gl='git log'
# alias gb='git branch'
# alias gsth='git stash'
alias gps='git push'
alias gpl='git pull'
alias gpff='git pull --ff-only'
alias gist='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'

alias upmaster='git checkout master && git pull --ff-only upstream master && git push origin master'


#alias lsusb='system_profiler SPUSBDataType'

alias minicom_last='ls -lhrt /dev/cu.usb* | tail -1 | awk "{print \$NF}" | xargs -o minicom -D'

alias printcolors='for i in {0..255}; do printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" $i ; if ! (( ($i + 1 ) % 8 )); then echo ; fi ; done'

alias fastdl='aria2c -x 16 -s 16 -k 2M --file-allocation=none'

# alias gtkwave="open -a gtkwave"
alias gtkwave="/Applications/gtkwave.app/Contents/Resources/bin/gtkwave"
#
# functions
#------------
copy()
{
    if [ 0 == $# ]; then
        echo "$0 <string to copy>"
        exit
    fi

    echo $1 | tr -d '\n' | pbcopy && echo "$1 was copied to clipboard"
}

ff()
{
    if [ -z "$1" ]; then
	return;
    fi
    find . -name "*$1*";
}

gr() { grep --color -rnsi $1 * ; }


function figr()
{
  if [ 0 == $# ]; then
    echo "$0 <regexp> <grep opt> <ext>>"
      exit
      fi

      EXCLUDE_CVS="--exclude=CVS"
      EXCLUDE_CTAGS="--exclude=tags"
      EXCLUDE_CSCOPE="--exclude=cscope*"
      EXC_OPT="${EXCLUDE_CVS} ${EXCLUDE_CTAGS} ${EXCLUDE_CSCOPE}"

      INCLUDE_CH="--include=*.[ch]"
      INCLUDE_MAK="--include=*.mak"
      INCLUDE_MAKEFILE="--include=Makefile*"
      INC_OPT="${INCLUDE_CH} ${INCLUDE_MAK} ${INCLUDE_MAKEFILE}"

      GREP_OPT="-ri"

      REGEXP=$1
      if (( 2 <= $# )); then
        GREP_OPT=$2
          fi
          if (( 3 <= $# )); then
            EXT=$3
              fi

              if [ -n EXT ]; then
                INC_OPT="--include=*.${EXT}"
                  fi

#echo "find $DIR $MAX_DEPTH -name \"*$EXT\" | xargs grep -n $GREP_OPT \"$REGEXP\" | hil \"$REGEXP\""
#find $DIR $MAX_DEPTH -name "*$EXT" | xargs grep -n $GREP_OPT "$REGEXP" | hil "$REGEXP"

#echo "grep -n --include \"*$EXT\" $EXCLUDE_CTAGS $EXCLUDE_CSCOPE $GREP_OPT \"$REGEXP\" . | hil \"$REGEXP\""
#      grep -n --include "*$EXT" $EXCLUDE_CTAGS $EXCLUDE_CSCOPE $GREP_OPT $GREP_OPT "$REGEXP" . | hil "$REGEXP"

                  echo  grep -n ${INC_OPT} ${EXC_OPT} ${GREP_OPT} \"$REGEXP\" . | hil \"$REGEXP\"
                  grep -n ${INC_OPT} ${EXC_OPT} ${GREP_OPT} "$REGEXP" . | hil "$REGEXP"

#  grep -rni --include=*.[chi] --include=*.mak --include=Makefile --color=always "$@" * | hil
}

alias itunes_kill="kill -STOP $(pgrep AMPDeviceDiscoveryAgent)"

# stolen blatantly from some apple employee's github :)
itunes_annoyance() {
     if [ "$1" == "ON" ]; then
         sudo defaults write com.apple.iTunes disableAMDSInstall -bool true
         sudo defaults write com.apple.iTunes dontAutomaticallySyncIPods -bool true
         sudo defaults write com.apple.MobileDevice Blacklist -array-add com.apple.Xcode com.apple.dt.Xcode com.apple.iTunesHelper
         sudo defaults write com.apple.usbmuxd BlackList -array-add com.apple.Xcode com.apple.dt.Xcode com.apple.iTunesHelper
         sudo defaults write /Library/Preferences/com.apple.usbmuxd BlackList -array-add com.apple.iTunes

         # Quit iTunesHelper
         killall iTunesHelper
         # Remove iTunesHelper from your user account's Login Items (if present)
         osascript -e 'tell application "System Events" to if exists login item "iTunesHelper" then delete login item "iTunesHelper"'

         # Quit Image Capture (if running)
         killall "Image Capture"
         # Stop Image Capture from auto-launching
         defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool YES

     elif [ "$1" == "OFF" ] ; then
         # This script is meant to be the inverse of stop-itunes-from-being-annoying.sh

         sudo defaults write com.apple.iTunes disableAMDSInstall -bool false
         sudo defaults write com.apple.iTunes dontAutomaticallySyncIPods -bool false
         sudo defaults delete com.apple.MobileDevice Blacklist
         sudo defaults delete com.apple.usbmuxd BlackList
         sudo defaults delete /Library/Preferences/com.apple.usbmuxd BlackList

         # Launch iTunesHelper
         open /Applications/iTunes.app/Contents/MacOS/iTunesHelper.app

         # Add iTunesHelper from your user account's Login Items (if not present)
         osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/iTunes.app/Contents/MacOS/iTunesHelper.app", hidden:false}'

         # Start Image Capture auto-launching
         defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool NO
     else
       echo "Use ON/OFF"
   fi
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh


export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent

PATH="/Users/ronyk/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/ronyk/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/ronyk/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/ronyk/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/ronyk/perl5"; export PERL_MM_OPT;

# pyenv init
eval "$(pyenv init -)"
