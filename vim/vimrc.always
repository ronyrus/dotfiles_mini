" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
let mapleader=","

" source ~/.vimrc.before if it exists.
if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

" =============== Plug Initialization ===============
" Install vim-plug if we don't already have it
if empty(glob('~/.vim/autoload/plug.vim'))
    !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if filereadable(expand("$HOME/.vim/plug.vim"))
    source $HOME/.vim/plug.vim
endif

" ================ General Config ====================

set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000		"Command line history --- default 20
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set ruler			"Show the cursor position all the time
set guicursor=a:blinkon0        "Disable cursor blink
set visualbell                  "No sounds
set t_vb=""		        "No visual bell, no beep
set autoread                    "Reload files changed outside vim

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

syntax on             " Enable syntax highlighting

set showmatch		"show matching parenthesis

" ================ Search Settings  =================
set incsearch		" Incremental searching
set hlsearch		" Highlight search
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set viminfo='100,f1  "Save up to 100 marks, enable capital marks

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowritebackup

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================

set autoindent
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set shiftround
set textwidth=100

" Display tabs and trailing spaces visually
"set list listchars=tab:\ \ ,trail:Â·

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" ================ Folds ============================

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

"===============================================================================
" FileType
"===============================================================================
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
filetype plugin indent on

autocmd FileType ruby set tabstop=2
autocmd FileType ruby set shiftwidth=2
autocmd FileType ruby set softtabstop=2

autocmd FileType python set tabstop=4
autocmd FileType python set shiftwidth=4
autocmd FileType python set softtabstop=4

autocmd FileType ld set tabstop=8
autocmd FileType ld set shiftwidth=8
autocmd FileType ld set softtabstop=8

"autocmd Filetype gitcommit setlocal spell textwidth=72

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" Set status line
set statusline=[%02n]%y%f\ %(\[%M%R%H]%)%=\ %4l,%02c%2V\ %P%*
" Always display a status line at the bottom of the window
set laststatus=2

" ================ Scrolling ========================

set scrolloff=3         "Start scrolling when we're x lines away from margins
set sidescrolloff=5
set sidescroll=1

"===============================================================================
" key mapping
"===============================================================================
" cvsdiff from file or from review
noremap <f1> :execute ':!cvsdiff' TokenUnderCursor(1) '&' <cr><cr>
map <silent> <f4> rvu
"
" look for >80 chars and 2 empty lines, etc. 
map <silent> <f3> /\%>80v.\+\\|^\s*\n\s*$<cr> 

" split windows movement
map <c-l> <c-w>l
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k

" Tab and Shift+Tab move to the windows on the right/left
noremap <Tab> <c-w><c-w>
noremap <S-Tab> <c-w>W

" Space and Shift+Space for scrolling 
noremap <Space> <C-d>
noremap <S-Space> <C-u>

set lazyredraw

set cursorline
" cscope
if has("cscope")

  " use cscope for <C-]>
  set cscopetag
  " search the cscope db first, ctags second
  set cscopetagorder=0
  " auto-prefix the tags with the location of the cscope.out
  "set cscoperelative

  if filereadable("cscope.out")
	  cs add cscope.out
  endif

  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

nmap <unique><Leader>rd :call DiffRs(TokenUnderCursor(1))<Enter>
nmap <unique><Leader>rv :execute ':!review diff' TokenUnderCursor(1)<cr><cr>
"===============================================================================
" diff settings
"===============================================================================
if &diff

  " next change
  nnoremap <space> ]czz
  " previous change
  nnoremap <S-Space> [czz

  noremap <silent> <F5> :diffup<cr>
  noremap <silent> <F11> :diffget<cr>
  noremap <silent> <F12> :diffput<cr>

  " q -> quit all the windows
  cnoremap q qa
  noremap q :qa<CR>

  " two cursor lines are distracting
  set nocursorline

  " so we see when we are out of line
  set wrap

  " scroll bind, so the diff will move together
  set scrollbind

  " fold method
  set foldmethod=manual

  " fill the empty lines with dots, big context to prevent folding
  set diffopt=filler,context:5000,foldcolumn:0

  " cvsdiff script checks out *.tmp files
  au BufNewFile,BufRead *.c.*.tmp       setf c
  au BufNewFile,BufRead *.h.*.tmp       setf c
  au BufNewFile,BufRead *.i             setf c
  au BufNewFile,BufRead *.mak.*.tmp     setf make
  au BufNewFile,BufRead Makefile.*.tmp  setf make
endif

"===============================================================================
" Functions
"===============================================================================
function DiffRs(rev)
  let cmd="review diff -x -u " . a:rev
  let revout=system(cmd)
  let do_diff="0"
  :wincmd t
   if &filetype != "Review"
     :sp "split
     :wincmd t "top-left window
   else
     :vs
     :wincmd l
     let do_diff="1"
   endif
   :ene "edit a new, unnamed buffer
   set filetype=Review
   silent 0put=revout
   :set fdc=0
   set syn=diff
   set buftype=nofile
   if do_diff == "1"
     :wincmd h
     :diffthis
     :wincmd l
     :diffthis
   endif
   ":colorscheme peachpuff
endfunction

function Diff2Linux()
    let fname=expand("%:p")
    let relidx=stridx(fname, "linux-2.6")
    if relidx==-1
	return
    endif
    let fpath=strpart(fname, relidx)
    :vs
    :wincmd h
    exe 'edit ' . "/home/eyalbi/git/" . fpath
    :diffthis
    :wincmd l
    :diffthis
    "":colorscheme peachpuff
endfunction

function BTree(bug_id, show_durs)
    if a:show_durs
        let cmd="bugz show " . a:bug_id . " -td"
    else
        let cmd="bugz show " . a:bug_id . " -t"
    endif
    call Disp(cmd)
    set syn=bugz_tree
    "folding settings
    set foldmethod=indent   "fold based on indent
    set foldnestmax=10      "deepest fold is 10 levels
    set nofoldenable        "dont fold by default
    set foldlevel=1         "this is just what i use
endfunction

function DiffR(review_id)
    let cmd="review diff -x -u " . a:review_id
    call Disp(cmd)
endfunction

function Disp(cmd)
    let sout=system(a:cmd)
    if &filetype != "Disp"
      :sp
    endif
    :ene
    silent 0put=sout
    set buftype=nofile
    :1
    set filetype=Disp
endfunction

function! IsTokenChar(is_fname, char)
	if a:char == "_"
		return 1
	endif
	if a:char >= "0" && a:char <= "9"
		return 1
	endif
	if a:char >= "A" && a:char <= "Z"
		return 1
	endif
	if a:char >= "a" && a:char <= "z"
		return 1
	endif
	if a:is_fname && (a:char == "/" || a:char == "." || a:char == "-")
		return 1
	endif
	return 0
endfunction

function! TokenUnderCursor(is_fname)
	echo ""
	let line = getline(".")
	let pos = col(".") - 1

	let begpos = pos -1
	while IsTokenChar(a:is_fname, strpart(line, begpos, 1)) == 1
		let begpos = begpos - 1
	endwhile
	
	let endpos = pos + 1
	while IsTokenChar(a:is_fname, strpart(line, endpos, 1)) == 1
		let endpos = endpos + 1
	endwhile

	return strpart(line, begpos+1, endpos-begpos-1)
endfunction

" Jungo stuff
set cinoptions=:0,(s,u0,U1
"unmap Jungo mapped keys that I don't need
map f <nop>
unmap f

nmap q :q<CR>

" disable jungo stuff
let g:dont_load_vimispell=1

" additional filetypes
autocmd BufNewFile,BufRead *.csv setlocal filetype=csv

" adjust C code settings
autocmd FileType c setlocal textwidth=120
autocmd FileType c setlocal shiftwidth=4


set rtp+=/usr/local/opt/fzf

for f in split(glob('~/.vim/plugin/settings/*.vim'), '\n')
  exe 'source' f
endfor

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
